# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from isolate.connections.grpc.definitions import agent_v2_pb2 as agent__v2__pb2


class AgentV2Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTask = channel.unary_unary(
            "/AgentV2/CreateTask",
            request_serializer=agent__v2__pb2.CreateTaskRequest.SerializeToString,
            response_deserializer=agent__v2__pb2.CreateTaskResponse.FromString,
        )
        self.CheckTask = channel.unary_unary(
            "/AgentV2/CheckTask",
            request_serializer=agent__v2__pb2.CheckTaskRequest.SerializeToString,
            response_deserializer=agent__v2__pb2.CheckTaskResponse.FromString,
        )
        self.CancelTask = channel.unary_unary(
            "/AgentV2/CancelTask",
            request_serializer=agent__v2__pb2.CancelTaskRequest.SerializeToString,
            response_deserializer=agent__v2__pb2.CancelTaskResponse.FromString,
        )
        self.AgentStatus = channel.unary_unary(
            "/AgentV2/AgentStatus",
            request_serializer=agent__v2__pb2.AgentStatusRequest.SerializeToString,
            response_deserializer=agent__v2__pb2.AgentStatusResponse.FromString,
        )


class AgentV2Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTask(self, request, context):
        """Create a new task."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CheckTask(self, request, context):
        """Check the status of a task."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CancelTask(self, request, context):
        """Try to cancel a task, if it is running. If it is running, there is
        nothing we can do to stop it (so the server has to choose either to
        kill the entire agent or to let the task run to completion).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AgentStatus(self, request, context):
        """The current status of the task queue."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AgentV2Servicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateTask": grpc.unary_unary_rpc_method_handler(
            servicer.CreateTask,
            request_deserializer=agent__v2__pb2.CreateTaskRequest.FromString,
            response_serializer=agent__v2__pb2.CreateTaskResponse.SerializeToString,
        ),
        "CheckTask": grpc.unary_unary_rpc_method_handler(
            servicer.CheckTask,
            request_deserializer=agent__v2__pb2.CheckTaskRequest.FromString,
            response_serializer=agent__v2__pb2.CheckTaskResponse.SerializeToString,
        ),
        "CancelTask": grpc.unary_unary_rpc_method_handler(
            servicer.CancelTask,
            request_deserializer=agent__v2__pb2.CancelTaskRequest.FromString,
            response_serializer=agent__v2__pb2.CancelTaskResponse.SerializeToString,
        ),
        "AgentStatus": grpc.unary_unary_rpc_method_handler(
            servicer.AgentStatus,
            request_deserializer=agent__v2__pb2.AgentStatusRequest.FromString,
            response_serializer=agent__v2__pb2.AgentStatusResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "AgentV2", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AgentV2(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/AgentV2/CreateTask",
            agent__v2__pb2.CreateTaskRequest.SerializeToString,
            agent__v2__pb2.CreateTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CheckTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/AgentV2/CheckTask",
            agent__v2__pb2.CheckTaskRequest.SerializeToString,
            agent__v2__pb2.CheckTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CancelTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/AgentV2/CancelTask",
            agent__v2__pb2.CancelTaskRequest.SerializeToString,
            agent__v2__pb2.CancelTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AgentStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/AgentV2/AgentStatus",
            agent__v2__pb2.AgentStatusRequest.SerializeToString,
            agent__v2__pb2.AgentStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
